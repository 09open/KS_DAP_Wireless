<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F103C8_HID\STM32F103C8_HID.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F103C8_HID\STM32F103C8_HID.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Aug 06 16:19:58 2020
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; usbd_hid_process &rArr; DAP_ProcessCommand &rArr; DAP_SWJ_Pins &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[12]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[11]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">MemManage_Handler</a><BR>
 <LI><a href="#[13]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from stm32_fs_init.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32_fs_init.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">USER_initialize</a> from user_diskio.o(i.USER_initialize) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[d]">USER_ioctl</a> from user_diskio.o(i.USER_ioctl) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[b]">USER_read</a> from user_diskio.o(i.USER_read) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[a]">USER_status</a> from user_diskio.o(i.USER_status) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[c]">USER_write</a> from user_diskio.o(i.USER_write) referenced 2 times from user_diskio.o(.data)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[46]">cdc_dataout_request</a> from tusbd_cdc.o(i.cdc_dataout_request) referenced from tusbd_cdc.o(i.tusb_cdc_device_request)
 <LI><a href="#[4]">cdc_line_coding_change</a> from main.o(i.cdc_line_coding_change) referenced 2 times from main.o(.data)
 <LI><a href="#[2]">cdc_recv_data</a> from main.o(i.cdc_recv_data) referenced 2 times from main.o(.data)
 <LI><a href="#[3]">cdc_send_done</a> from main.o(i.cdc_send_done) referenced 2 times from main.o(.data)
 <LI><a href="#[47]">hid_dataout_request</a> from tusbd_hid.o(i.hid_dataout_request) referenced from tusbd_hid.o(i.tusb_hid_device_request)
 <LI><a href="#[0]">hid_recv_data</a> from main.o(i.hid_recv_data) referenced 2 times from main.o(.data)
 <LI><a href="#[1]">hid_send_done</a> from main.o(i.hid_send_done) referenced 2 times from main.o(.data)
 <LI><a href="#[8]">init_ep</a> from main.o(i.init_ep) referenced 2 times from main.o(.data)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6]">msc_block_read</a> from composite_device.o(i.msc_block_read) referenced 2 times from main.o(.data)
 <LI><a href="#[7]">msc_block_write</a> from composite_device.o(i.msc_block_write) referenced 2 times from main.o(.data)
 <LI><a href="#[5]">msc_get_cap</a> from composite_device.o(i.msc_get_cap) referenced 2 times from main.o(.data)
 <LI><a href="#[51]">tusb_cdc_device_init</a> from tusbd_cdc.o(i.tusb_cdc_device_init) referenced from tusbd_cdc.o(.constdata)
 <LI><a href="#[54]">tusb_cdc_device_recv_done</a> from tusbd_cdc.o(i.tusb_cdc_device_recv_done) referenced from tusbd_cdc.o(.constdata)
 <LI><a href="#[52]">tusb_cdc_device_request</a> from tusbd_cdc.o(i.tusb_cdc_device_request) referenced from tusbd_cdc.o(.constdata)
 <LI><a href="#[53]">tusb_cdc_device_send_done</a> from tusbd_cdc.o(i.tusb_cdc_device_send_done) referenced from tusbd_cdc.o(.constdata)
 <LI><a href="#[49]">tusb_hid_device_init</a> from tusbd_hid.o(i.tusb_hid_device_init) referenced from tusbd_hid.o(.constdata)
 <LI><a href="#[4c]">tusb_hid_device_recv_done</a> from tusbd_hid.o(i.tusb_hid_device_recv_done) referenced from tusbd_hid.o(.constdata)
 <LI><a href="#[4a]">tusb_hid_device_request</a> from tusbd_hid.o(i.tusb_hid_device_request) referenced from tusbd_hid.o(.constdata)
 <LI><a href="#[4b]">tusb_hid_device_send_done</a> from tusbd_hid.o(i.tusb_hid_device_send_done) referenced from tusbd_hid.o(.constdata)
 <LI><a href="#[4d]">tusb_msc_device_init</a> from tusbd_msc.o(i.tusb_msc_device_init) referenced from tusbd_msc.o(.constdata)
 <LI><a href="#[50]">tusb_msc_device_recv_done</a> from tusbd_msc.o(i.tusb_msc_device_recv_done) referenced from tusbd_msc.o(.constdata)
 <LI><a href="#[4e]">tusb_msc_device_request</a> from tusbd_msc.o(i.tusb_msc_device_request) referenced from tusbd_msc.o(.constdata)
 <LI><a href="#[4f]">tusb_msc_device_send_done</a> from tusbd_msc.o(i.tusb_msc_device_send_done) referenced from tusbd_msc.o(.constdata)
 <LI><a href="#[48]">tusb_set_addr_after_status</a> from teeny_usb_stm32_fs_device.o(i.tusb_set_addr_after_status) referenced from teeny_usb.o(i.tusb_standard_request)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[55]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_block_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_get_descriptor
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_inquiry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_hid_device_request
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_inquiry
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[56]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DAP_ProcessCommand</STRONG> (Thumb, 828 bytes, Stack size 48 bytes, dap.o(i.DAP_ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DAP_ProcessCommand &rArr; DAP_SWJ_Pins &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_TransferBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_Transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessVendorCommand
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Sequence
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_ReadIDCode
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_JTAG_SETUP
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_WriteAbort
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_TransferBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_process
</UL>

<P><STRONG><a name="[60]"></a>DAP_ProcessVendorCommand</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dap_vendor.o(i.DAP_ProcessVendorCommand))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[6e]"></a>DAP_Setup</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dap.o(i.DAP_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DAP_Setup &rArr; PORT_JTAG_SETUP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_JTAG_SETUP
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
</UL>

<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[71]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[72]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[70]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>HAL_DMA_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_GPIO_Init</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferSlow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferFast
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SWD_SETUP
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_JTAG_SETUP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
</UL>

<P><STRONG><a name="[94]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[74]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[73]"></a>HAL_IWDG_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[75]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[7a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[76]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[7e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[7f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[80]"></a>HAL_SPI_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[79]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[84]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[85]"></a>HAL_UART_MspInit</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[87]"></a>HID_GetOutReport</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hid_transfer.o(i.HID_GetOutReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetOutReport
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_recv_data
</UL>

<P><STRONG><a name="[ae]"></a>HID_SetInReport</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hid_transfer.o(i.HID_SetInReport))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_done
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>JTAG_IR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jtag_dp.o(i.JTAG_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JTAG_IR &rArr; JTAG_IR_Slow
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR_Slow
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_TransferBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_Transfer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_WriteAbort
</UL>

<P><STRONG><a name="[8c]"></a>JTAG_IR_Fast</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, jtag_dp.o(i.JTAG_IR_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JTAG_IR_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
</UL>

<P><STRONG><a name="[8d]"></a>JTAG_IR_Slow</STRONG> (Thumb, 318 bytes, Stack size 28 bytes, jtag_dp.o(i.JTAG_IR_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JTAG_IR_Slow
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
</UL>

<P><STRONG><a name="[67]"></a>JTAG_ReadIDCode</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, jtag_dp.o(i.JTAG_ReadIDCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JTAG_ReadIDCode
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[66]"></a>JTAG_Sequence</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, jtag_dp.o(i.JTAG_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = JTAG_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[5c]"></a>JTAG_Transfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jtag_dp.o(i.JTAG_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JTAG_Transfer &rArr; JTAG_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_TransferSlow
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_TransferFast
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_TransferBlock
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_JTAG_Transfer
</UL>

<P><STRONG><a name="[8e]"></a>JTAG_TransferFast</STRONG> (Thumb, 360 bytes, Stack size 36 bytes, jtag_dp.o(i.JTAG_TransferFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = JTAG_TransferFast
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Transfer
</UL>

<P><STRONG><a name="[8f]"></a>JTAG_TransferSlow</STRONG> (Thumb, 694 bytes, Stack size 40 bytes, jtag_dp.o(i.JTAG_TransferSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JTAG_TransferSlow
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Transfer
</UL>

<P><STRONG><a name="[6f]"></a>JTAG_WriteAbort</STRONG> (Thumb, 358 bytes, Stack size 28 bytes, jtag_dp.o(i.JTAG_WriteAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = JTAG_WriteAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_WriteAbort
</UL>

<P><STRONG><a name="[90]"></a>MX_DMA_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>MX_GPIO_Init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>MX_IWDG_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>MX_SPI1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SWD_Transfer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sw_dp.o(i.SWD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferSlow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_TransferFast
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_WriteAbort
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_TransferBlock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWD_Transfer
</UL>

<P><STRONG><a name="[99]"></a>SWD_TransferFast</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, sw_dp.o(i.SWD_TransferFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWD_TransferFast &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>

<P><STRONG><a name="[9a]"></a>SWD_TransferSlow</STRONG> (Thumb, 946 bytes, Stack size 64 bytes, sw_dp.o(i.SWD_TransferSlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>

<P><STRONG><a name="[65]"></a>SWJ_Sequence</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sw_dp.o(i.SWJ_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SWJ_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SystemClock_Config</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_fs_init.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; tusb_ep_handler &rArr; tusb_setup_handler &rArr; tusb_standard_request &rArr; tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32_fs_init.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; tusb_ep_handler &rArr; tusb_setup_handler &rArr; tusb_standard_request &rArr; tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_reconfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsub_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>USER_initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_diskio.o(i.USER_initialize))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USER_ioctl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_ioctl))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USER_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_read))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USER_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_diskio.o(i.USER_status))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USER_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_diskio.o(i.USER_write))
<BR>[Address Reference Count : 1]<UL><LI> user_diskio.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4]"></a>cdc_line_coding_change</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.cdc_line_coding_change))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>cdc_recv_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.cdc_recv_data))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>cdc_send_done</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.cdc_send_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdc_send_done
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_rx_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>flash_write</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, board.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_block_write
</UL>

<P><STRONG><a name="[0]"></a>hid_recv_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.hid_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hid_recv_data &rArr; HID_GetOutReport
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetOutReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>hid_send_done</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.hid_send_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hid_send_done
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_rx_valid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SetInReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = main &rArr; usbd_hid_process &rArr; DAP_ProcessCommand &rArr; DAP_SWJ_Pins &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_process
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_device_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_open_device
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_loop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_get_device
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6]"></a>msc_block_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, composite_device.o(i.msc_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msc_block_read
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>msc_block_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, composite_device.o(i.msc_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msc_block_write &rArr; flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>msc_get_cap</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, composite_device.o(i.msc_get_cap))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>swd_init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, swd_host.o(i.swd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_init &rArr; DAP_Setup &rArr; PORT_JTAG_SETUP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[6c]"></a>swd_init_debug</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, swd_host.o(i.swd_init_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_init_debug &rArr; JTAG2SWD &rArr; swd_read_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
</UL>

<P><STRONG><a name="[8b]"></a>swd_read_dp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, swd_host.o(i.swd_read_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_read_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[bf]"></a>swd_write_ap</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
</UL>

<P><STRONG><a name="[bd]"></a>swd_write_dp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_dp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[6d]"></a>swd_write_memory</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SWJ_Pins
</UL>

<P><STRONG><a name="[a2]"></a>tsub_resume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_fs_init.o(i.tsub_resume))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>tusb_class_request</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tusbd.o(i.tusb_class_request))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_setup_handler
</UL>

<P><STRONG><a name="[d2]"></a>tusb_clear_stall</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, teeny_usb_stm32_fs_device.o(i.tusb_clear_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tusb_clear_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
</UL>

<P><STRONG><a name="[ca]"></a>tusb_delay_ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.tusb_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_open_device
</UL>

<P><STRONG><a name="[a0]"></a>tusb_ep_handler</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, teeny_usb_stm32_fs_device.o(i.tusb_ep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tusb_ep_handler &rArr; tusb_setup_handler &rArr; tusb_standard_request &rArr; tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data_done
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_recv_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_read_ep0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_setup_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>tusb_get_device</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_fs_init.o(i.tusb_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>tusb_msc_device_loop</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tusbd_msc.o(i.tusb_msc_device_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tusb_msc_device_loop &rArr; msc_data_out &rArr; handle_msc_scsi_command &rArr; msc_send_data &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_out
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>tusb_on_rx_done</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tusbd.o(i.tusb_on_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_on_rx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_recv_data
</UL>

<P><STRONG><a name="[ce]"></a>tusb_on_tx_done</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tusbd.o(i.tusb_on_tx_done))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data_done
</UL>

<P><STRONG><a name="[b1]"></a>tusb_open_device</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32_fs_init.o(i.tusb_open_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_open_device
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_delay_ms
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>tusb_read_ep0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, teeny_usb_stm32_fs_device.o(i.tusb_read_ep0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tusb_read_ep0 &rArr; tusb_pma_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_pma_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
</UL>

<P><STRONG><a name="[a1]"></a>tusb_reconfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tusbd.o(i.tusb_reconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tusb_reconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>tusb_recv_data</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, teeny_usb_stm32_fs_device.o(i.tusb_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tusb_recv_data &rArr; tusb_pma_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_pma_rx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_on_rx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
</UL>

<P><STRONG><a name="[a4]"></a>tusb_send_data</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, teeny_usb_stm32_fs_device.o(i.tusb_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_hid_process
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_get_descriptor
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_cdc_device_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_dataout_request
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_request
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_send_data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_hid_device_request
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_dataout_request
</UL>

<P><STRONG><a name="[c5]"></a>tusb_send_data_done</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, teeny_usb_stm32_fs_device.o(i.tusb_send_data_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tusb_send_data_done &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_on_tx_done
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
</UL>

<P><STRONG><a name="[48]"></a>tusb_set_addr_after_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, teeny_usb_stm32_fs_device.o(i.tusb_set_addr_after_status))
<BR>[Address Reference Count : 1]<UL><LI> teeny_usb.o(i.tusb_standard_request)
</UL>
<P><STRONG><a name="[d1]"></a>tusb_set_addr_before_status</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, teeny_usb.o(i.tusb_set_addr_before_status))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
</UL>

<P><STRONG><a name="[b0]"></a>tusb_set_device_config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tusbd.o(i.tusb_set_device_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_set_device_config
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>tusb_set_recv_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, teeny_usb.o(i.tusb_set_recv_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_cdc_device_request
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_cdc_device_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_hid_device_request
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_hid_device_init
</UL>

<P><STRONG><a name="[a5]"></a>tusb_set_rx_valid</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, teeny_usb_stm32_fs_device.o(i.tusb_set_rx_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hid_send_done
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_send_done
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_cdc_device_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_hid_device_init
</UL>

<P><STRONG><a name="[ac]"></a>tusb_set_stall</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, teeny_usb_stm32_fs_device.o(i.tusb_set_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_set_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_get_descriptor
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_out
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>

<P><STRONG><a name="[c7]"></a>tusb_setup_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, teeny_usb.o(i.tusb_setup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tusb_setup_handler &rArr; tusb_standard_request &rArr; tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_ep_handler
</UL>

<P><STRONG><a name="[b2]"></a>usbd_hid_process</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hid_transfer.o(i.usbd_hid_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = usbd_hid_process &rArr; DAP_ProcessCommand &rArr; DAP_SWJ_Pins &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8]"></a>init_ep</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, main.o(i.init_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_ep
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>DAP_JTAG_Transfer</STRONG> (Thumb, 806 bytes, Stack size 64 bytes, dap.o(i.DAP_JTAG_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DAP_JTAG_Transfer &rArr; JTAG_Transfer &rArr; JTAG_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Transfer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[5e]"></a>DAP_JTAG_TransferBlock</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, dap.o(i.DAP_JTAG_TransferBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DAP_JTAG_TransferBlock &rArr; JTAG_Transfer &rArr; JTAG_TransferSlow
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Transfer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[68]"></a>DAP_SWD_Transfer</STRONG> (Thumb, 790 bytes, Stack size 64 bytes, dap.o(i.DAP_SWD_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DAP_SWD_Transfer &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[69]"></a>DAP_SWD_TransferBlock</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, dap.o(i.DAP_SWD_TransferBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DAP_SWD_TransferBlock &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[64]"></a>DAP_SWJ_Pins</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, dap.o(i.DAP_SWJ_Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DAP_SWJ_Pins &rArr; swd_write_memory &rArr; swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[6a]"></a>DAP_WriteAbort</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dap.o(i.DAP_WriteAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DAP_WriteAbort &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_WriteAbort
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_IR
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[63]"></a>PORT_JTAG_SETUP</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, dap.o(i.PORT_JTAG_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PORT_JTAG_SETUP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[62]"></a>PORT_SWD_SETUP</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, dap.o(i.PORT_SWD_SETUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PORT_SWD_SETUP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_Setup
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_ProcessCommand
</UL>

<P><STRONG><a name="[89]"></a>JTAG2SWD</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, swd_host.o(i.JTAG2SWD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = JTAG2SWD &rArr; swd_read_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_reset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_init_debug
</UL>

<P><STRONG><a name="[c0]"></a>int2array</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, swd_host.o(i.int2array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
</UL>

<P><STRONG><a name="[8a]"></a>swd_reset</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swd_host.o(i.swd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swd_reset &rArr; SWJ_Sequence
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWJ_Sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG2SWD
</UL>

<P><STRONG><a name="[be]"></a>swd_transfer_retry</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swd_host.o(i.swd_transfer_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWD_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_dp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_read_dp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_block
</UL>

<P><STRONG><a name="[c1]"></a>swd_write_block</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, swd_host.o(i.swd_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = swd_write_block &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[c2]"></a>swd_write_byte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = swd_write_byte &rArr; swd_write_ap &rArr; swd_write_dp &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_ap
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_memory
</UL>

<P><STRONG><a name="[c3]"></a>swd_write_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, swd_host.o(i.swd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = swd_write_data &rArr; swd_transfer_retry &rArr; SWD_Transfer &rArr; SWD_TransferSlow &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_transfer_retry
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2array
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swd_write_byte
</UL>

<P><STRONG><a name="[c8]"></a>tusb_get_descriptor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, teeny_usb.o(i.tusb_get_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_stall
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_standard_request
</UL>

<P><STRONG><a name="[d0]"></a>tusb_standard_request</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, teeny_usb.o(i.tusb_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tusb_standard_request &rArr; tusb_get_descriptor &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_addr_before_status
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_stall
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_clear_stall
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_get_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_setup_handler
</UL>

<P><STRONG><a name="[cd]"></a>copy_tx</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, teeny_usb_stm32_fs_device.o(i.copy_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data_done
</UL>

<P><STRONG><a name="[cb]"></a>tusb_pma_rx</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, teeny_usb_stm32_fs_device.o(i.tusb_pma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tusb_pma_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_recv_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_read_ep0
</UL>

<P><STRONG><a name="[c9]"></a>tusb_disconnect</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_fs_init.o(i.tusb_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_open_device
</UL>

<P><STRONG><a name="[47]"></a>hid_dataout_request</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tusbd_hid.o(i.hid_dataout_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hid_dataout_request &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_hid.o(i.tusb_hid_device_request)
</UL>
<P><STRONG><a name="[49]"></a>tusb_hid_device_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tusbd_hid.o(i.tusb_hid_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_hid_device_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_rx_valid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_recv_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_hid.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>tusb_hid_device_recv_done</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tusbd_hid.o(i.tusb_hid_device_recv_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_hid_device_recv_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_hid.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>tusb_hid_device_request</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tusbd_hid.o(i.tusb_hid_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tusb_hid_device_request &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_recv_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_hid.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>tusb_hid_device_send_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tusbd_hid.o(i.tusb_hid_device_send_done))
<BR>[Address Reference Count : 1]<UL><LI> tusbd_hid.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>handle_msc_scsi_command</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tusbd_msc.o(i.handle_msc_scsi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_msc_scsi_command &rArr; msc_send_data &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_stall
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_send_data
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_send_csw
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_loop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_out
</UL>

<P><STRONG><a name="[b4]"></a>msc_data_out</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tusbd_msc.o(i.msc_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = msc_data_out &rArr; handle_msc_scsi_command &rArr; msc_send_data &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_stall
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_loop
</UL>

<P><STRONG><a name="[ab]"></a>msc_prepare_rx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tusbd_msc.o(i.msc_prepare_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msc_prepare_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_rx_valid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_recv_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_loop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_msc_device_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_out
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>

<P><STRONG><a name="[a9]"></a>msc_scsi_command</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, tusbd_msc.o(i.msc_scsi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msc_scsi_command &rArr; msc_scsi_write_10
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_write_10
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_format_capacity
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_capacity_10
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_10
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_inquiry
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>

<P><STRONG><a name="[b7]"></a>msc_scsi_inquiry</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tusbd_msc.o(i.msc_scsi_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msc_scsi_inquiry
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[ba]"></a>msc_scsi_read_10</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tusbd_msc.o(i.msc_scsi_read_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msc_scsi_read_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[b9]"></a>msc_scsi_read_capacity_10</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tusbd_msc.o(i.msc_scsi_read_capacity_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = msc_scsi_read_capacity_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[b8]"></a>msc_scsi_read_format_capacity</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tusbd_msc.o(i.msc_scsi_read_format_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = msc_scsi_read_format_capacity
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[b5]"></a>msc_scsi_sense</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tusbd_msc.o(i.msc_scsi_sense))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_write_10
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_format_capacity
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_capacity_10
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_read_10
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_data_out
</UL>

<P><STRONG><a name="[bb]"></a>msc_scsi_write_10</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, tusbd_msc.o(i.msc_scsi_write_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msc_scsi_write_10
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_scsi_command
</UL>

<P><STRONG><a name="[ad]"></a>msc_send_csw</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tusbd_msc.o(i.msc_send_csw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msc_send_csw &rArr; msc_send_data &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>

<P><STRONG><a name="[aa]"></a>msc_send_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tusbd_msc.o(i.msc_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msc_send_data &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_send_csw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_msc_scsi_command
</UL>

<P><STRONG><a name="[4d]"></a>tusb_msc_device_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tusbd_msc.o(i.tusb_msc_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tusb_msc_device_init &rArr; msc_prepare_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_prepare_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_msc.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>tusb_msc_device_recv_done</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tusbd_msc.o(i.tusb_msc_device_recv_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_msc_device_recv_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_msc.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>tusb_msc_device_request</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tusbd_msc.o(i.tusb_msc_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tusb_msc_device_request &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_msc.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>tusb_msc_device_send_done</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tusbd_msc.o(i.tusb_msc_device_send_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_msc_device_send_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_msc.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>cdc_ctrl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tusbd_cdc.o(i.cdc_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdc_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_cdc_device_request
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_dataout_request
</UL>

<P><STRONG><a name="[46]"></a>cdc_dataout_request</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tusbd_cdc.o(i.cdc_dataout_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cdc_dataout_request &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_cdc.o(i.tusb_cdc_device_request)
</UL>
<P><STRONG><a name="[51]"></a>tusb_cdc_device_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tusbd_cdc.o(i.tusb_cdc_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_cdc_device_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_rx_valid
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_recv_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_cdc.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>tusb_cdc_device_recv_done</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tusbd_cdc.o(i.tusb_cdc_device_recv_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tusb_cdc_device_recv_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_cdc.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>tusb_cdc_device_request</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tusbd_cdc.o(i.tusb_cdc_device_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tusb_cdc_device_request &rArr; tusb_send_data &rArr; copy_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_send_data
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_set_recv_buffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tusbd_cdc.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>tusb_cdc_device_send_done</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tusbd_cdc.o(i.tusb_cdc_device_send_done))
<BR>[Address Reference Count : 1]<UL><LI> tusbd_cdc.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>wait_flash</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board.o(i.wait_flash))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[7b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[86]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
